---
layout: post
title: "명품 자바 프로그래밍 개정 4판: 자바 그리고 C와 C++의 비교"
date: 2025-10-29 01:51:00 +09:00
last_modified_at: 2025-10-29 01:51:00 +09:00
categories: Java Study
sitemap:
  changefreq: daily
  priority: 0.5
---

### 자바
---
 * 자바는 컴파일러가 바로 [바이트 코드][1]를 생성하며, 링크 과정이 없다.
 * 바이트 코드는 자바 가상 머신에서만 실행 가능하다.
 * 자바는 [런타임][2]에 필요한 클래스들이 자바 가상 기계에 의해 링크되며 클래스 로더가 필요한 클래스를 동적으로 로딩한다.
 * [클래스 로더][3] 객체를 이용하여 개발자가 직접 클래스를 로딩할 수 있다.

### C와 C++
---
 * C와 C++에서는 컴파일러가 중간 단계인 [목적 코드][5]를 생성한 후 [링커][5]가 필요한 라이브러리들을 링크하여 실행 가능한 파일(.exe)을 만든다.
 * 정적 라이브러리의 경우 실행 파일에 포함시키므로 실행 파일 크기가 커진다.
 * 동적 라이브러리의 경우 실행 시간에 링크가 일어난다.
 * 목적 코드 및 실행 파일은 플랫폼에 따라 다르므로, 플랫폼이 바뀌면 소스 코드를 수정하거나, 컴파일과 링크를 다시해야 한다.

### 링커
---
 컴파일러가 만들어낸 하나 이상의 목적 코드를 갖고 이를 하나의 실행 가능한 프로그램으로 병합하는 프로그램이다.

![링크 과정을 간단히 나타낸 그림](https://drive.google.com/thumbnail?id=1fYE_IBQJzMhMkVU5TaDfUfm-jWFp3v8l&sz=w1000)

 [1]: https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C "자바 가상 머신이 실행하는 명령어의 형태다."
 [2]: https://ko.wikipedia.org/wiki/%EB%9F%B0%ED%83%80%EC%9E%84 "프로그램이 실행되고 있는 동안의 동작을 말하며, 컴파일 타임은 런타임과 달리 정적이며 컴파일 되는 동안의 동작을 말한다."
 [3]: https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%EA%B0%80%EC%83%81_%EB%A8%B8%EC%8B%A0 "실행 시에 CPU에 독립적인 바이트코드를 생성하고 메모리에 올려 자바 가상 머신이 실행할 수 있는 구조로 동적인 스크립트 언어 구현에 유용하다."
 [4]: https://ko.wikipedia.org/wiki/%EB%AA%A9%EC%A0%81_%ED%8C%8C%EC%9D%BC "컴파일러나 어셈블러가 소스 코드 파일을 컴파일링 또는 어셈블링해서생성하는 파일로, 기계어와 같은 이진 코드로 이루어져있다."
 [5]: https://ko.wikipedia.org/wiki/%EB%AA%A9%EC%A0%81_%ED%8C%8C%EC%9D%BC "링커는 여러 개의 목적 파일을 묶어 커널과 연결함으로써 실행 파일을 만들거나, 라이브러리를 만들어내는데 쓰인다."