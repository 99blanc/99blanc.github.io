---
layout: post
title: "명품 자바 프로그래밍 개정 4판: 식별자와 데이터 타입"
date: 2025-10-30 03:15:00 +09:00
categories: Code Java Study
---

### 식별자 이름 규칙
---
 자바에서 [식별자][1]를 만들 떄 다음 규칙이 준수되어야 한다.

 * 특수문자(%, *, @, ^ 등), 공백(Tab, Space 등)은 식별자로 사용할 수 없으나, "_, $" 문자들은 예외로 사용할 수 있다.
 * 한글도 식별자로 사용 가능하다.
 * if, while, class 등 자바 언어에서 사용하는 [키워드][2]는 식별자로 사용할 수 없다.
 * 식별자의 첫 번째 문제로 숫자는 사용할 수 없다.
 * 대소문자를 구별한다.
 * 길이 제한이 없다.

### 자바 키워드
---
 자바에서 이미 그 용도가 정해진 것으로 예악어 또는 키워드라고도 하며, 식별자의 이름으로 사용할 수 없다.
 
### 자바의 데이터 타입
---
 데이터 타입이란 자바에서 다룰 수 있는 데이터의 종류를 말한다.

 자바의 데이터 타입은 크게 기본 타입과 참조 타입과 같이 크게 2가지로 나뉘며 다음을 참고하면 세부적인 데이터 타입 분류를 확인할 수 있다.

![자바의 데이터 타입](https://drive.google.com/thumbnail?id=1o5Mo4v-8i1ossHm-dJ6Qi3ysvRBOsHWv&sz=w1000)

 * [기본 타입][3](Primitive Type)
	* boolean
	* char
	* byte
	* short
	* int
	* long
	* float
	* double

 다음을 통해 기본 타입의 [리터럴][4], 크기, 값의 범위는 다음을 참고하면 확인할 수 있다.

![자바의 기본 타입 정보](https://drive.google.com/thumbnail?id=1jZEPcyotqqZZKLtIOS_4Y8_yfG6Iyoz9&sz=w1000)

 * [참조 타입][5](Reference Type)
	* 배열(array)에 대한 참조
	* 클래스(class)에 대한 참조
	* 인터페이스(interface)에 대한 참조

### 문자열
---
 자바에서 [문자열][6]은 기본 타입에 속하지 않고 JDK에서 제공하는 String 클래스를 이용하여 사용한다. 따라서 참조 타입으로 분류되며, 다음과 같은 특징들을 가지고 있다.

 * 불변성: 값을 변경할 수 없으며, 새 객체를 생성하여 값을 대체한다. 그리고 멀티 스레드 환경에서 [동기화 문제][6] 없이 안전하게 사용 가능하고 해시 코드가 캐시되어 성능 최적화에 도움을 준다.
 * 문자열 상수 [풀][7]: 메모리 사용을 최적화하기 위해 문자열 상수 풀(String Constant Pool, SCP)이라는 특별한 영역을 힙 메모리 내에 관리한다. 사용하려는 리터럴이 존재하면 새 객체를 만들지 않고 기존 객체의 주소를 반환하여 재사용하도록 한다.
 * 참조 타입: 문자열은 기본 타입이 아닌 참조 타입이므로 두 문자열의 내용 비교 시에는 "==" 연산자 대신 내부에 구현되어 있는 equals() 메소드를 사용해서 실제 내용이 같은지 비교한다.
 * 결합의 비효율성: 불변성으로 인해, 반복문 내에서 문자열을 결합하는 것은 성능상 비효율적이다. 따라서 문자열을 자주 변경하거나 결합해야 할 때는 가변인 StringBuilder(싱글 스레드 환경) 객체 또는 StringBuffer(멀티 스레드 환경) 객체를 사용해야 성능 저하를 방지할 수 있다.
 * char 타입 배열로 구성: 내부적으로 자바 문자열은 char 타입의 배열로 구현되어 있다.

### 상수
---
 변수와 달리 실행 중에 값을 바꿀 수 없으며, 변수 선언 시 final 카워드를 사용한다. 상수 선언 방법은 다음과 같다.

```java
package ch2n2;

public class Const {
	public static void main(String[] args) {
		final double PI = 3.141592;
		
		System.out.println(PI);
	}
}
```

### 타입 변환
---
 변수나 상수 혹은 리터럴의 타입을 다른 타입으로 바꾸는 것을 말한다.
 
 * 자동 타입 변환: 다음과 같이 치환문(=)이나 수식 내에서 타입이 일치하지 않을 때, 컴파일러는 오류 대신 작은 타입을 큰 타입으로 자동 변환한다.

```java
long m = 25; // 25는 int 타입이지만, long 타입으로 변환된다.
double d = 3.14 * 10; // 실수 연산을 하기 위해 10 리터럴이 10.0으로 변환된다.
```

 * 강제 타입 변환: 개발자가 강제로 타입 변환을 지시하는 경우를 말한다.

```java
int n = 300;
byte b = (byte)n;
```

 [1]: https://ko.wikipedia.org/wiki/%EC%8B%9D%EB%B3%84%EC%9E%90 "클래스, 변수, 상수, 메소드 등에 붙이는 이름을 말한다."
 [2]: https://en.wikipedia.org/wiki/List_of_Java_keywords "변수, 메소드, 클래스 명 또는 기타 식별자와 같은 구문에서 사용할 수 없는 미리 정의된 의미를 갖는 예악어를 의미한다."
 [3]: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html "스택 메모리 영역에 변수에 할당한 값이 직접 저장된다."
  [4]: https://en.wikipedia.org/wiki/Literal_(mathematical_logic) "프로그램에 직접 표현한 값을 말한다."
 [5]: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html "힙 메모리 영역에 객체가 저장된다. 이는 스택 메모리 주소 값에 객체를 참조하는데 필요한 주소 값 전체를 나타내는 참조 변수가 생성된다는 것을 의미한다."
 [6]: https://en.wikipedia.org/wiki/String_interning "문자열 인터닝은 불변이어야 하는 각 고유 문자열 값의 복사본을 하나만 저장하는 방법이다. 인터닝하면 문자열을 만들거나 인턴할 때 더 많은 시간이 필요하지만 일부 문자열 처리 작업을 더 시간 효율적이거나 공간 효율적으로 만든다는 특징이 있다."
 [7]: https://en.wikipedia.org/wiki/Object_pool_pattern "필요에 따라 객체 공간을 할당하고 파괴하는 대신 사용할 준비가 된 초기화된 객체 공간을 사용하는 소프트웨어 생성 패턴으로 풀에서 객체를 요청하고 반환된 객체에 대한 작업을 수행한다. 이는 자바의 플랫폼 독립성과 JVM의 메모리 관리라는 큰 시스템의 특징 때문에 필연적인 최적화 메커니즘이다."
