---
layout: post
title: "명품 자바 프로그래밍 개정 4판: 객체와 클래스"
date: 2025-10-31 22:50:00 +09:00
last_modified_at: 2025-10-31 22:50:00 +09:00
categories: Code Java Study
sitemap:
  changefreq: daily
  priority: 0.5
---

### 객체 지향 언어의 특징
---
 [객체 지향][1] 언어는 실세계의 객체를 프로그램 내에 표현하기 위해 [객체][2]와 클래스 개념을 도입한 언어로, 다음과 같은 특성을 가진다.

 * [캡슐화][3](Encapsulation): 객체 내부를 보호하고 볼 수 없게 하는 것으로 객체의 가장 기본적인 특징이다. 자바의 캡슐화는 필드(멤버 변수)와 메소드(멤버 함수)로 구성되며, 외부와의 접근을 위해 일부분만 공개 노출한다.
 * 상속(Inheritance): 상위 객체의 속성을 하위 객체에 물려져, 하위 객체가 상위 객체의 속성을 모두 가지는 관계이다. [자바의 상속][4]은 확장(extends)의 개념으로, 부모 클래스를 슈퍼 클래스(Super Class)라고 부르며, 자식 클래스를 (Sub Class)라고 부른다. 코드를 재사용함으로써, 코드 작성에 드는 시간과 비용을 줄일 수 있다.
 * 다형성(Polymorphism): 같은 이름의 메소드가 클래스 혹은 객체에 따라 다르게 동작하도록 구현되는 개념으로, 자바에서는 슈퍼 클래스에서 구현된 메소드를, 서브 클래스에서 동일한 이름으로 자신의 특징에 맞게 다시 구현하는 [메소드 오버라이딩][5](Overriding)과, 클래스 내에서 이름이 같지만 서로 다르게 동작하는 메소드를 여러개 만드는 [메소드 오버로딩][6](Overloading)이 있다.


### 객체 지향 언어의 목적
---
 객체 지향 언어는 [절차 지향 언어][7]의 단점을 보완하기 위해 탄생하였고, 언어의 목적은 다음과 같다.

 * 소프트웨어의 생산성 향상: 객체, 캡슐화, 상속, 다형성 등 소프트웨어의 재사용을 위한 여러 기법들을 가진 객체 지향 언어를 통해 이미 작성된 코드를 재사용하기 쉬우며, 부분 수정을 통해 소프트웨어를 다시 만드는 부담을 대폭 줄일 수 있게 한다.
 * 실세계에 대한 쉬운 모델링: 과거에는 데이터 처리나 계산 절차를 표현하기 위해 절차 지향 언어를 주로 사용했지만, 현대에 이르러 실세계의 복잡한 구조와 상호 작용을 하나의 프로그램으로 묘사해야 하는 필요성이 커졌다. 이러한 요구에 따라, 현실 세계의 각 요소를 객체로 만들고, 이 객체들 간의 상호 작용을 통해 문제를 해결하는 방식인 객체 지향 언어가 프로그램의 효율적인 모델링 및 유지 보수를 위한 효과적인 프로그래밍을 할 수 있게 한다.

### 클래스 구성
---
 자바 클래스는 class 카워드를 사용하여 선언한다. 클래스의 [구성 요소][8]를 멤버라고 부르며, 멤버는 필드(멤버 변수)와 메소드(멤버 함수)로 두 가지이다.

```java
public class HelloWorldApp { // 클래스. 메소드를 넣을 수 있다.
	// 전역 변수의 시작점
	public static void main(String[] args) { // 메인 메소드의 시작점, public 없이는 작동하지 않는다.
		// 지역 변수의 시작점
		System.out.println("Hello World!"); // Hello World를 출력한다.
	} // 메소드의 끝, 다른 메소드가 붙을 수 있다.
} // 클래스의 끝, 다른 클래스가 붙을 수 있으나 해당 클래스는 public 키워드가 붙어있지 않아야 한다.
```

 [1]: https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D "객체 개념을 기반으로 하는 프로그래밍 언어, 혹은 패러다임이다."
 [2]: https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99) "클래스에서 정의한 것을 토대로 메모리에 할당된 것으로 프로그램에서 사용되는 데이터 또는 식별자에 의해 참조되는 공간을 의미하며, 인스턴스라고도 한다."
 [3]: https://ko.wikipedia.org/wiki/%EC%BA%A1%EC%8A%90%ED%99%94 "객체의 속성과 오퍼레이션을 하나로 묶고, 실제 구현 내용 일부를 내부에 감춘다."
 [4]: https://ko.wikipedia.org/wiki/%EC%83%81%EC%86%8D_(%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)#%EC%84%9C%EB%B8%8C%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80_%EC%88%98%ED%8D%BC%ED%81%B4%EB%9E%98%EC%8A%A4 "자식 클래스 또는 파생 클래스라고도 부르는 서브 클래스는 하나 이상의 다른 클래스로부터 하나 이상의 언어 엔티티를 상속하는 모듈러이다."
 [5]: https://ko.wikipedia.org/wiki/%EB%A9%94%EC%86%8C%EB%93%9C_%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9 "서브 클래스가 자신의 슈퍼 클래스들 중 하나에 의해 이미 제공된 메소드를 특정한 형태로 구현하는 특징이다."
 [6]: https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98_%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C "같은 메소드 명을 가지고 있으나, 매개 변수, 리턴 타입 등의 특징은 다른 여러 개의 서브 프로그램 생성을 가능하게 하는 특징이다."
 [7]: https://ko.wikipedia.org/wiki/%EC%A0%88%EC%B0%A8%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D "프로시저 호출의 개념을 바탕으로 하고 있는 프로그래밍 언어를 의미한다. 프로시저는 루틴, 서브 프로그램, 서브 루틴, 메소드라고도 하는데, 수행되어야 할 연속적인 계산 과정을 포함하고 있는 것을 말한다."
 [8]: https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4)#Hello_world "필드와, 메소드 혹은 속성과 오퍼레이션으로 구분한다."
